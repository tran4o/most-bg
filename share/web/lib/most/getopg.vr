var INITIAL = false;
var TEST = false;
var DEBUG = false;

var pcnt = 0;
var pnew = 0;

function find_vendor(pl) {
    var s1 = db.most.article.SELECT("product_line.code=:pl AND vendor.code<>'HPOLD'");
    s1["pl"] = pl;
    
    if (s1.size > 0) {
        var vend = s1[0].vendor;
        if (DEBUG) console.log("identified vendor: " + vend.code);
        return vend;
    } 
    
    return null;
}

function prod_find_or_create(code, name, product_line, description, vendor) {
    //trim code
    if ( code.indexOf("#") > 0 ) {
        code = code.substring(0, code.indexOf("#"));
    }

    var artobj = db.most.article.INSTANCES[code];

    if (vendor == null) {
        vendor = find_vendor(product_line);
    }

    if (artobj != null) {
        // console.log("product " + code + " found. vendor is " + vendor);
    } else {
        if (DEBUG) console.log("product " + code + " not found. new instance. vendor is " + vendor);
        artobj = new db.most.article();
    }

    vendor = db.contacts.vendor.INSTANCES[vendor];
    if ( vendor == null ) {
        vendor = db.contacts.vendor.INSTANCES["HPOLD"];
    }

    artobj.code = code;
    artobj.name["en-US"] = name;

    if (product_line) {
        var plobj = db.most.product_line.INSTANCES[product_line];
        if (plobj != null) {
            if (DEBUG) console.log("product line " + product_line + " found");
        } else {
            console.log("product line " + code + " not found. new instance");
            plobj = new db.most.product_line();
            plobj.code = product_line;
        }
        artobj.product_line = plobj;
    }

    if( description != null) {
        if (DEBUG) console.log("updating article descripion");
        artobj.description["en-US"] = description;    
    }
        
    if (artobj.vendor == null) {
        artobj.vendor = vendor;    
    }
    
    artobj.commit();
    return artobj;
}

// ------------------------------------------------------------

function connect_source_db() {
    var map = new M();

    map["user"] = db.prefs["most.import.sql.user"];
    map["password"] = db.prefs["most.import.sql.pass"];
    var con = new java.db.Connection(
        "mssql_2008",
        "jdbc:sqlserver://" + db.prefs["most.import.sql.host"] + ";database=" + db.prefs["most.import.sql.dbname"],
        map);

    return con;
}

// main // -----------------------------------------------------------

var con = connect_source_db();

var opgfilt = "(( DiscountMode = 'R' or DiscountMode = 'U' or DiscountMode = 'M' ) and LastModifiedDate > '2014-01-01')";
var lastmod;
var cond;
var vopg = new M();

if ( INITIAL ) {
    console.log("getting initial after 2014-01-01");
    cond = opgfilt + " or DealID in ( select distinct DealID from selinv3 inner join invdet id on selinv3.InvoiceNo = id.InvoiceNo )";
} else {
    for (var opg: db.most.opg.SELECT()) {
        vopg[opg.code] = opg.version;
    }
    cond = opgfilt;
}
    
var q = "select opg.DealID as code, opgcount.detcount, opg.DealType as deal_type, opg.McCode as mc_code, DealDescription as description, SelloutStartDate as valid_from, SelloutEndDate as valid_to, DiscountMode as discount_mode, Version as version, LastModifiedDate as update_time from dbo.opg inner join ( select count(*) as detcount, DealID from dbo.opgdet group by DealID ) opgcount on opg.DealID = opgcount.DealID where " + cond;

var opglst = [];
var cnt = 0; var cntnew = 0;

if (INITIAL==false && DEBUG==true)  {
    var opgcodes = [];
    var res = con.select(q);

    while (res.next()) {
        opgcodes.push(res.getString("code") + "/" + res.getString("update_time"));
    }

    console.log("would have to fetch these: " + opgcodes.join("\n"));
}

var res = con.select(q);
if (TEST) {
    console.log(q);
    return;
}

while (res.next()) {
    var oc = res.getString("code");
    oc = oc.replace(" ","");

    var opg = db.most.opg.INSTANCES[oc];
    var p;

    if (opg != null) {
        if (vopg[oc] != res.getInt("version")) {
            console.log("update opg. code " + oc + ", mode is [" + res.getString("discount_mode") + "]" + 
            " old v" + vopg[oc] + " new v" + res.getInt("version"));        
        } else {
            opg.deal_type = res.getString("deal_type"); 
            opg.mc_code  = res.getString("mc_code"); 
            db.commit();   // just once

            // console.log("will NOT UPDATE opg. version is same. code " + oc  + " v" + opg.version);
            continue;
        }
    } else {
        if (DEBUG) console.log("create opg. code " + oc + " / " + res.getString("discount_mode"));
        opg = new db.most.opg();
        opg.code = oc;
        cntnew++;
    }

    if (res.getString("discount_mode") == "2") continue;

    opg.code = res.getString("code");
    opg.discount_mode = db.core.option_set.INSTANCES["discount_mode"].options[res.getString("discount_mode")];
    opg.description["en-US"] = res.getString("description");
//    opg.name["en-US"] = res.getString("name");
    opg.valid_from = res.getDate("valid_from");
    opg.valid_to = res.getDate("valid_to");
    opg.update_time = res.getDate("update_time");
    opg.import_time = java.date.now();
    opg.version = res.getInt("version");
    opg.deal_type = res.getString("deal_type");
    opg.mc_code = res.getString("mc_code");

    opglst.push(opg);
    opg.commit();

    if ( cnt++ % 128 == 0 ) {
        console.log("reviewed " + cnt + " OPG(s) and counting...");
        db.commit();
        java.util.commitDBConnection();
    }
}

console.log("processed a total of " + cnt + " OPG(s), and " + cntnew + " of them are new. good work !");
console.log("---------------------");
console.log("fetching new OPG details...");

cnt = 0; cntnew = 0;

for (var nopg: opglst) {
    console.log("getting OPG " + nopg);

    var q = [
        "select DealID as opg_code,",
        "'OPG' + RIGHT('0000000000' + DealID, 10) + '/' + cast (ItemNo as varchar) as code,",
        "dbo.ven2clean(VendorPartNo) as article_code,",
        "ProductLine as product_line, MaximumQuantity as max_quantity,",
        "BundleNumber as bundle_number,",
        "(select top 1 short_desc from NancyProducts where product_base_no = dbo.ven2clean(VendorPartNo) order by UpdatedDateTimeStamp desc) as article_name, ",
        "(select top 1 long_desc from NancyProducts where product_base_no = dbo.ven2clean(VendorPartNo) order by UpdatedDateTimeStamp desc) as article_description, ",
        "(select top 1 CompanyIdentifier from NancyProducts where product_base_no = dbo.ven2clean(VendorPartNo) order by UpdatedDateTimeStamp desc) as article_vendor, ",
        "NetPrice as price",
        "from opgdet ",
        "where DealID = '" + nopg.code + "'"].join(" ");

    var res = con.select(q);

    while(res.next()) {
        var opgdetcode = res.getString("code");
        opgdetcode.replace(" ", "");
        var opgdet = db.most.opg_entry_fixed.INSTANCES[opgdetcode];

        if (opgdet != null) {
            if (DEBUG) console.log("found opg " + res.getString("opg_code") + " detail. code: " + opgdetcode);
        } else {
            opgdet = new db.most.opg_entry_fixed();
            if (DEBUG) console.log("create opg " + res.getString("opg_code") + " detail. code: " + opgdetcode);
            cntnew++;
        }

        opgdet.code = opgdetcode;
        opgdet.max_quantity = res.getInt("max_quantity");
        opgdet.bundle_number = res.getString("bundle_number");
        opgdet.value = res.getInt("price");

        // set article, meanwhile creating it
        var artobj = prod_find_or_create(
            res.getString("article_code"),
            res.getString("article_name"),
            res.getString("product_line"),
            res.getString("article_description"),
            res.getString("article_vendor")
        );

        opgdet.article = artobj;
        opgdet.commit();

        // add opg entry to opg
        nopg.entries << opgdet;

        if ( cnt++ % 128 == 0 ) {
            console.log("processed " + cnt + " OPG positions and counting...");
            db.commit();
            java.util.commitDBConnection();
        }
    }

    nopg.commit();
}

console.log("processed a total of " + cnt + " OPG positions, and " + cntnew + " of them are new. good work !");
console.log("create a total of " + pnew+ " products on the fly. found existing " + pcnt);

